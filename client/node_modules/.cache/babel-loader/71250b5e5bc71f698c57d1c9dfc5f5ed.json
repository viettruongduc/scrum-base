{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport useButton from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport useList from '../useList';\nimport defaultOptionStringifier from './defaultOptionStringifier';\nimport { useCompoundParent } from '../utils/useCompound';\nimport selectReducer from './selectReducer';\n/**\n *\n * Demos:\n *\n * - [Unstyled Select](https://mui.com/base/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base/react-select/hooks-api/#use-select)\n */\n\nfunction useSelect(props) {\n  const {\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    optionStringifier = defaultOptionStringifier,\n    value: valueProp\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    defaultValue = multiple ? defaultValueProp : [defaultValueProp];\n  }\n\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      return multiple ? valueProp : [valueProp];\n    }\n\n    return undefined;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: /*#__PURE__*/React.createRef(),\n        id: `${listboxId}_${index}`\n      }]));\n    }\n\n    return subitems;\n  }, [optionsParam, subitems, listboxId]); // prevents closing the listbox on keyUp right after opening it\n\n  const ignoreEnterKeyUp = React.useRef(false); // prevents reopening the listbox when button is clicked\n  // (listbox closes on lost focus, then immediately reopens on click)\n\n  const ignoreClick = React.useRef(false); // Ensure the listbox is focused after opening\n\n  const [listboxFocusRequested, requestListboxFocus] = React.useState(false);\n  const focusListboxIfRequested = React.useCallback(() => {\n    if (listboxFocusRequested && listboxRef.current != null) {\n      listboxRef.current.focus();\n      requestListboxFocus(false);\n    }\n  }, [listboxFocusRequested]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef, focusListboxIfRequested);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible\n  } = useButton({\n    disabled,\n    ref: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\n  const isItemDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n\n    const option = options.get(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [options]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = options.get(valueToCheck);\n\n    if (!option) {\n      return '';\n    }\n\n    return optionStringifier(option);\n  }, [options, optionStringifier]);\n  const controlledState = React.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React.useCallback(itemValue => {\n    var _options$get;\n\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  const handleSelectionChange = React.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange == null ? void 0 : onChange(event, newValues);\n    } else {\n      var _newValues$;\n\n      onChange == null ? void 0 : onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React.useCallback((event, newValue) => {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  const handleStateChange = React.useCallback((e, field, fieldValue) => {\n    if (field === 'open') {\n      onOpenChange == null ? void 0 : onOpenChange(fieldValue);\n\n      if (fieldValue === false && (e == null ? void 0 : e.type) !== 'blur') {\n        var _buttonRef$current;\n\n        (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const useListParameters = {\n    getInitialState: () => {\n      var _defaultValue;\n\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId,\n    controlledProps: controlledState,\n    isItemDisabled,\n    listRef: handleListboxRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    itemStringifier: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    }\n  } = useList(useListParameters);\n  React.useEffect(() => {\n    focusListboxIfRequested();\n  }, [focusListboxIfRequested]);\n  React.useEffect(() => {\n    requestListboxFocus(open);\n  }, [open]);\n\n  const createHandleMouseDown = otherHandlers => event => {\n    var _otherHandlers$onMous;\n\n    otherHandlers == null ? void 0 : (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);\n\n    if (!event.defaultPrevented && open) {\n      ignoreClick.current = true;\n    }\n  };\n\n  const createHandleButtonClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n\n    if (!event.defaultPrevented && !ignoreClick.current) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n\n    ignoreClick.current = false;\n  };\n\n  const createHandleButtonKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (event.key === 'Enter') {\n      ignoreEnterKeyUp.current = true;\n    }\n\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      dispatch({\n        type: SelectActionTypes.buttonArrowKeyDown,\n        key: event.key,\n        event\n      });\n    }\n  };\n\n  const createHandleListboxKeyUp = otherHandlers => event => {\n    var _otherHandlers$onKeyU;\n\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    const closingKeys = multiple ? ['Escape'] : ['Escape', 'Enter', ' '];\n\n    if (open && !ignoreEnterKeyUp.current && closingKeys.includes(event.key)) {\n      var _buttonRef$current2;\n\n      buttonRef == null ? void 0 : (_buttonRef$current2 = buttonRef.current) == null ? void 0 : _buttonRef$current2.focus();\n    }\n\n    ignoreEnterKeyUp.current = false;\n  };\n\n  useEnhancedEffect(() => {\n    // Scroll to the currently highlighted option.\n    if (highlightedOption != null) {\n      var _options$get2;\n\n      const optionRef = (_options$get2 = options.get(highlightedOption)) == null ? void 0 : _options$get2.ref;\n\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [highlightedOption, options]);\n\n  const getButtonProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, getButtonRootProps(_extends({}, otherHandlers, {\n      onClick: createHandleButtonClick(otherHandlers),\n      onMouseDown: createHandleMouseDown(otherHandlers),\n      onKeyDown: createHandleButtonKeyDown(otherHandlers)\n    })), {\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-haspopup': 'listbox',\n      'aria-controls': listboxId\n    });\n  };\n\n  const getOptionMetadata = React.useCallback(optionValue => options.get(optionValue), [options]);\n\n  const getListboxProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, getListboxRootProps(_extends({}, otherHandlers, {\n      onKeyUp: createHandleListboxKeyUp(otherHandlers)\n    })), {\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined\n    });\n  };\n\n  React.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getListboxProps,\n    getOptionMetadata,\n    contextValue,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\n\nexport default useSelect;","map":{"version":3,"names":["_extends","React","unstable_useForkRef","useForkRef","unstable_useId","useId","unstable_useEnhancedEffect","useEnhancedEffect","useButton","SelectActionTypes","useList","defaultOptionStringifier","useCompoundParent","selectReducer","useSelect","props","buttonRef","buttonRefProp","defaultOpen","defaultValue","defaultValueProp","disabled","listboxId","listboxIdProp","listboxRef","listboxRefProp","multiple","onChange","onHighlightChange","onOpenChange","open","openProp","options","optionsParam","optionStringifier","value","valueProp","useRef","handleButtonRef","undefined","useMemo","subitems","contextValue","compoundComponentContextValue","Map","map","option","index","label","ref","createRef","id","ignoreEnterKeyUp","ignoreClick","listboxFocusRequested","requestListboxFocus","useState","focusListboxIfRequested","useCallback","current","focus","handleListboxRef","getRootProps","getButtonRootProps","active","buttonActive","focusVisible","buttonFocusVisible","optionValues","Array","from","keys","isItemDisabled","valueToCheck","_option$disabled","get","stringifyOption","controlledState","selectedValues","getItemId","itemValue","_options$get","handleSelectionChange","event","newValues","_newValues$","handleHighlightChange","newValue","handleStateChange","e","field","fieldValue","type","_buttonRef$current","useListParameters","getInitialState","_defaultValue","highlightedValue","controlledProps","listRef","onStateChange","reducerActionContext","items","itemStringifier","selectionMode","stateReducer","dispatch","getListboxRootProps","listContextValue","state","highlightedOption","selectedOptions","useEffect","createHandleMouseDown","otherHandlers","_otherHandlers$onMous","onMouseDown","call","defaultPrevented","createHandleButtonClick","_otherHandlers$onClic","onClick","action","buttonClick","createHandleButtonKeyDown","_otherHandlers$onKeyD","onKeyDown","key","preventDefault","buttonArrowKeyDown","createHandleListboxKeyUp","_otherHandlers$onKeyU","onKeyUp","closingKeys","includes","_buttonRef$current2","_options$get2","optionRef","listboxClientRect","getBoundingClientRect","optionClientRect","top","scrollTop","bottom","getButtonProps","role","getOptionMetadata","optionValue","getListboxProps","useDebugValue","selectValue","length"],"sources":["C:/Users/TranAnhHoan/Desktop/scrum-base/client/node_modules/@mui/base/useSelect/useSelect.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport useButton from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport useList from '../useList';\nimport defaultOptionStringifier from './defaultOptionStringifier';\nimport { useCompoundParent } from '../utils/useCompound';\nimport selectReducer from './selectReducer';\n\n/**\n *\n * Demos:\n *\n * - [Unstyled Select](https://mui.com/base/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base/react-select/hooks-api/#use-select)\n */\nfunction useSelect(props) {\n  const {\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    optionStringifier = defaultOptionStringifier,\n    value: valueProp\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    defaultValue = multiple ? defaultValueProp : [defaultValueProp];\n  }\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      return multiple ? valueProp : [valueProp];\n    }\n    return undefined;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: /*#__PURE__*/React.createRef(),\n        id: `${listboxId}_${index}`\n      }]));\n    }\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n\n  // prevents closing the listbox on keyUp right after opening it\n  const ignoreEnterKeyUp = React.useRef(false);\n\n  // prevents reopening the listbox when button is clicked\n  // (listbox closes on lost focus, then immediately reopens on click)\n  const ignoreClick = React.useRef(false);\n\n  // Ensure the listbox is focused after opening\n  const [listboxFocusRequested, requestListboxFocus] = React.useState(false);\n  const focusListboxIfRequested = React.useCallback(() => {\n    if (listboxFocusRequested && listboxRef.current != null) {\n      listboxRef.current.focus();\n      requestListboxFocus(false);\n    }\n  }, [listboxFocusRequested]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef, focusListboxIfRequested);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible\n  } = useButton({\n    disabled,\n    ref: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\n  const isItemDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n    const option = options.get(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [options]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = options.get(valueToCheck);\n    if (!option) {\n      return '';\n    }\n    return optionStringifier(option);\n  }, [options, optionStringifier]);\n  const controlledState = React.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React.useCallback(itemValue => {\n    var _options$get;\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  const handleSelectionChange = React.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange == null ? void 0 : onChange(event, newValues);\n    } else {\n      var _newValues$;\n      onChange == null ? void 0 : onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React.useCallback((event, newValue) => {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  const handleStateChange = React.useCallback((e, field, fieldValue) => {\n    if (field === 'open') {\n      onOpenChange == null ? void 0 : onOpenChange(fieldValue);\n      if (fieldValue === false && (e == null ? void 0 : e.type) !== 'blur') {\n        var _buttonRef$current;\n        (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const useListParameters = {\n    getInitialState: () => {\n      var _defaultValue;\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId,\n    controlledProps: controlledState,\n    isItemDisabled,\n    listRef: handleListboxRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    itemStringifier: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    }\n  } = useList(useListParameters);\n  React.useEffect(() => {\n    focusListboxIfRequested();\n  }, [focusListboxIfRequested]);\n  React.useEffect(() => {\n    requestListboxFocus(open);\n  }, [open]);\n  const createHandleMouseDown = otherHandlers => event => {\n    var _otherHandlers$onMous;\n    otherHandlers == null ? void 0 : (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);\n    if (!event.defaultPrevented && open) {\n      ignoreClick.current = true;\n    }\n  };\n  const createHandleButtonClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n    if (!event.defaultPrevented && !ignoreClick.current) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n    ignoreClick.current = false;\n  };\n  const createHandleButtonKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (event.key === 'Enter') {\n      ignoreEnterKeyUp.current = true;\n    }\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      dispatch({\n        type: SelectActionTypes.buttonArrowKeyDown,\n        key: event.key,\n        event\n      });\n    }\n  };\n  const createHandleListboxKeyUp = otherHandlers => event => {\n    var _otherHandlers$onKeyU;\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    const closingKeys = multiple ? ['Escape'] : ['Escape', 'Enter', ' '];\n    if (open && !ignoreEnterKeyUp.current && closingKeys.includes(event.key)) {\n      var _buttonRef$current2;\n      buttonRef == null ? void 0 : (_buttonRef$current2 = buttonRef.current) == null ? void 0 : _buttonRef$current2.focus();\n    }\n    ignoreEnterKeyUp.current = false;\n  };\n  useEnhancedEffect(() => {\n    // Scroll to the currently highlighted option.\n    if (highlightedOption != null) {\n      var _options$get2;\n      const optionRef = (_options$get2 = options.get(highlightedOption)) == null ? void 0 : _options$get2.ref;\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [highlightedOption, options]);\n  const getButtonProps = (otherHandlers = {}) => {\n    return _extends({}, getButtonRootProps(_extends({}, otherHandlers, {\n      onClick: createHandleButtonClick(otherHandlers),\n      onMouseDown: createHandleMouseDown(otherHandlers),\n      onKeyDown: createHandleButtonKeyDown(otherHandlers)\n    })), {\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-haspopup': 'listbox',\n      'aria-controls': listboxId\n    });\n  };\n  const getOptionMetadata = React.useCallback(optionValue => options.get(optionValue), [options]);\n  const getListboxProps = (otherHandlers = {}) => {\n    return _extends({}, getListboxRootProps(_extends({}, otherHandlers, {\n      onKeyUp: createHandleListboxKeyUp(otherHandlers)\n    })), {\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined\n    });\n  };\n  React.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getListboxProps,\n    getOptionMetadata,\n    contextValue,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\nexport default useSelect;"],"mappings":"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"},"metadata":{},"sourceType":"module"}