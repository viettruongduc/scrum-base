{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport useButton from '../useButton';\nimport { useListItem } from '../useList';\nimport { useCompoundItem } from '../utils/useCompoundItem';\n/**\n *\n * Demos:\n *\n * - [Unstyled Menu](https://mui.com/base/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuItem API](https://mui.com/base/react-menu/hooks-api/#use-menu-item)\n */\n\nexport default function useMenuItem(params) {\n  const {\n    disabled = false,\n    id: idParam,\n    ref: externalRef,\n    label\n  } = params;\n  const id = useId(idParam);\n  const itemRef = React.useRef(null);\n  const itemMetadata = React.useMemo(() => ({\n    disabled,\n    id: id != null ? id : '',\n    label,\n    ref: itemRef\n  }), [disabled, id, label]);\n  const {\n    getRootProps: getListRootProps,\n    highlighted,\n    ref: listItemRefHandler\n  } = useListItem({\n    item: id\n  });\n  const {\n    index,\n    totalItemCount\n  } = useCompoundItem(id, itemMetadata);\n  const {\n    getRootProps: getButtonProps,\n    focusVisible,\n    ref: buttonRefHandler\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: true\n  });\n  const handleRef = useForkRef(listItemRefHandler, buttonRefHandler, externalRef, itemRef);\n  React.useDebugValue({\n    id,\n    highlighted,\n    disabled,\n    label\n  }); // If `id` is undefined (during SSR in React < 18), we fall back to rendering a simplified menu item\n  // which does not have access to infortmation about its position or highlighted state.\n\n  if (id === undefined) {\n    return {\n      getRootProps: function () {\n        let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return _extends({}, otherHandlers, getButtonProps(otherHandlers), {\n          role: 'menuitem'\n        });\n      },\n      disabled: false,\n      focusVisible,\n      highlighted: false,\n      index: -1,\n      totalItemCount: 0,\n      ref: handleRef\n    };\n  }\n\n  const getRootProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    const resolvedButtonProps = _extends({}, otherHandlers, getButtonProps(otherHandlers));\n\n    const resolvedMenuItemProps = _extends({}, resolvedButtonProps, getListRootProps(resolvedButtonProps));\n\n    return _extends({}, otherHandlers, resolvedButtonProps, resolvedMenuItemProps, {\n      role: 'menuitem',\n      ref: handleRef\n    });\n  };\n\n  return {\n    getRootProps,\n    disabled,\n    focusVisible,\n    highlighted,\n    index,\n    totalItemCount,\n    ref: handleRef\n  };\n}","map":{"version":3,"names":["_extends","React","unstable_useId","useId","unstable_useForkRef","useForkRef","useButton","useListItem","useCompoundItem","useMenuItem","params","disabled","id","idParam","ref","externalRef","label","itemRef","useRef","itemMetadata","useMemo","getRootProps","getListRootProps","highlighted","listItemRefHandler","item","index","totalItemCount","getButtonProps","focusVisible","buttonRefHandler","focusableWhenDisabled","handleRef","useDebugValue","undefined","otherHandlers","role","resolvedButtonProps","resolvedMenuItemProps"],"sources":["C:/Users/TranAnhHoan/Desktop/scrum-base/client/node_modules/@mui/base/useMenuItem/useMenuItem.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport useButton from '../useButton';\nimport { useListItem } from '../useList';\nimport { useCompoundItem } from '../utils/useCompoundItem';\n\n/**\n *\n * Demos:\n *\n * - [Unstyled Menu](https://mui.com/base/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuItem API](https://mui.com/base/react-menu/hooks-api/#use-menu-item)\n */\nexport default function useMenuItem(params) {\n  const {\n    disabled = false,\n    id: idParam,\n    ref: externalRef,\n    label\n  } = params;\n  const id = useId(idParam);\n  const itemRef = React.useRef(null);\n  const itemMetadata = React.useMemo(() => ({\n    disabled,\n    id: id != null ? id : '',\n    label,\n    ref: itemRef\n  }), [disabled, id, label]);\n  const {\n    getRootProps: getListRootProps,\n    highlighted,\n    ref: listItemRefHandler\n  } = useListItem({\n    item: id\n  });\n  const {\n    index,\n    totalItemCount\n  } = useCompoundItem(id, itemMetadata);\n  const {\n    getRootProps: getButtonProps,\n    focusVisible,\n    ref: buttonRefHandler\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: true\n  });\n  const handleRef = useForkRef(listItemRefHandler, buttonRefHandler, externalRef, itemRef);\n  React.useDebugValue({\n    id,\n    highlighted,\n    disabled,\n    label\n  });\n\n  // If `id` is undefined (during SSR in React < 18), we fall back to rendering a simplified menu item\n  // which does not have access to infortmation about its position or highlighted state.\n  if (id === undefined) {\n    return {\n      getRootProps: (otherHandlers = {}) => _extends({}, otherHandlers, getButtonProps(otherHandlers), {\n        role: 'menuitem'\n      }),\n      disabled: false,\n      focusVisible,\n      highlighted: false,\n      index: -1,\n      totalItemCount: 0,\n      ref: handleRef\n    };\n  }\n  const getRootProps = (otherHandlers = {}) => {\n    const resolvedButtonProps = _extends({}, otherHandlers, getButtonProps(otherHandlers));\n    const resolvedMenuItemProps = _extends({}, resolvedButtonProps, getListRootProps(resolvedButtonProps));\n    return _extends({}, otherHandlers, resolvedButtonProps, resolvedMenuItemProps, {\n      role: 'menuitem',\n      ref: handleRef\n    });\n  };\n  return {\n    getRootProps,\n    disabled,\n    focusVisible,\n    highlighted,\n    index,\n    totalItemCount,\n    ref: handleRef\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}